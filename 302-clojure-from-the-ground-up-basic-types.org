---
english_title: Clojure From the Ground Up: basic types
portuguese_title: Clojure a partir do zero: tipos básicos
url: https://aphyr.com/posts/302-clojure-from-the-ground-up-basic-types
translators: Jéssica Paz <jessicapaz.me> e Édipo L Féderle <edipofederle@gmail.com>
reviser: nedded
---

* Clojure a partir do zero: tipos básicos
Nós aprendemos o básico da sintaxe de Clojure e o modelo de avaliação. Agora iremos fazer um
passeio nos substantivos básicos da linguagem.

** Tipos
Nós vimos alguns valores diferentes já, por exemplo, =nil=, =true=, =false=, =1=, =2.34= e ="meow"=. Claramente
todos essas coisas são valores diferentes, mas alguns deles parecem mais um com os outros.

Por exemplo, =1= e =2= são números bastante similares; ambos podem ser somados, dividios, multiplicados e subtraídos. =2.34= também é
um número, e funciona muito precido com =1= e =2=, mas são singelamente diferentes. Tem pontos decimais. Não é um inteiro.
E claramente =true= não é muito parecido com um número. O que é /verdadeiro/ mais um? Ou /falso/ dividido por 5.3? Estas perguntas
são mal definidas.

Nós dissemos que um **tipo** é um grupo de valores que funcionam da mesma maneira. É uma propriedade que alguns valores compartilham,
o que nos permite organizar o mundo em conjuntos de coisas semelhantes. 1 + 1 e 2 + 2 usam a mesma adição, que soma dois inteiros.
Tipos também nos ajudam a **verificar** que um programa faz sentido: que você pode somar dois números, ao invés de somar números com
porcos.

Tipos podem se sobrepor e se interceptarem. Gatos são animais e gatos também são confusos. Você poderia dizer que um gato é um membro 
(ou às vezes "instância"), dos tipos confuso e animal. Mas há coisas confusas como musgo que não são animais e animais como jacarés 
que não são confusos.

Outros tipos se somam completamente. Todos os persas são gatos domésticos, e todos os gatos domésticos são felinos, e todos os felinos 
são animais. Tudo o que é verdadeiro para um animal é automaticamente verdadeiro para um gato doméstico. Os tipos hierárquicos facilitam 
a criação de programas que não precisam conhecer todos os detalhes de cada valor; e, inversamente, para criar novos tipos em relação a outros. 
Mas eles também podem atrapalhar o(a) programador(a), porque nem toda classificação útil (como "confusão") é puramente hierárquica. 
Expressar tipos sobrepostos em uma hierarquia pode ser complicado.

Toda linguagem tem um sistema de tipos; uma maneira particular de organizar substantivos em tipos, descobrir quais verbos fazem sentido 
em quais tipos e relacionar tipos uns aos outros. Algumas línguas são rigorosas e outras mais relaxadas. Algumas enfatizam a hierarquia, 
e outras, uma visão mais ad hoc do mundo. Nós chamamos o sistema de tipos de Clojure de forte, pois operações em tipos impróprios simplesmente 
não são permitidas: o programa não irá funcionar se for solicitado a subtrair um dente-de-leão. Também dizemos que os tipos de Clojure são /dinâmicos/ 
porque são aplicados quando o programa é executado, em vez de quando o programa é lido pela primeira vez pelo computador.

Aprenderemos mais sobre as relações formais entre os tipos mais tarde, por enquanto, mantenha isso na sua cabeça. Ele começará a se encaixar 
em outros conceitos mais tarde.

** Inteiros
Vamos conhecer o tipo do número 3:

#+BEGIN_SRC clojure
user=> (type 3)
java.lang.Long
#+END_SRC
Então 3 é um **java.lang.Long** ou um "Long", pra abreviar. Como o Clojure é construído "em cima" do Java, muitos de seus tipos são tipos Java.
Longs, internamente, são representados como um grupo de sessenta e quatro dígitos binários (uns e zeros), escritos em um padrão específico chamado 
[[https://pt.wikipedia.org/wiki/Complemento_para_dois][representação do complemento de dois com sinal]]. Você não precisa se preocupar com os detalhes, há apenas duas coisas para lembrar sobre os longs. Primeiro,
os longs usam um bit para armazenar o sinal: se o número é positivo ou negativo. Em segundo lugar, os outros 63 bits representam o tamanho do número. Isso significa que o maior número que você
pode representar com um long é 263 - 1 (o menos um é por causa do número 0), e o menor tempo é -263.

Quão grande é 263 - 1?

#+BEGIN_SRC clojure
user=> Long/MAX_VALUE
9223372036854775807
#+END_SRC
Esse é um número razoavelmente grande. Na maioria das vezes, você não vai precisar de nada maior, mas… e se você precisar? O que acontece se você adicionar um ao maior Long?

#+BEGIN_SRC clojure
user=> (inc Long/MAX_VALUE)

ArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow (Numbers.java:1388)
#+END_SRC

Um erro ocorre! Este é Clojure nos dizendo que algo deu errado. O tipo de erro é um **ArithmeticException**,
e sua mensagem diz "integer overflow", o que significa "esse tipo de número não pode conter um número tão grande".
O erro veio de um local específico no código-fonte do programa: **Numbers.java**, na linha 1388. Isso faz parte do código-fonte de Clojure.
Mais tarde, aprenderemos mais sobre como desvendar mensagens de erro e descobrir o que deu errado.

O importante é que o sistema de tipos do Clojure nos protegeu de fazer algo perigoso; em vez de retornar um valor corrompido, ele cancelou a avaliação e retornou um erro.

Se você precisa de números realmente grandes, você pode usar um BigInt: um inteiro de precisão arbitrária. Vamos converter o maior Long em um BigInt e incrementá-lo:

#+BEGIN_SRC clojure
user=> (inc (bigint Long/MAX_VALUE))
9223372036854775808N
#+END_SRC

Notou o N no final? É assim que o Clojure escreve números inteiros de precisão arbitrária.

#+BEGIN_SRC clojure
user=> (type 5N)
clojure.lang.BigInt
#+END_SRC

Existem também números menores.

#+BEGIN_SRC clojure
user=> (type (int 0))
java.lang.Integer
user=> (type (short 0))
java.lang.Short
user=> (type (byte 0))
java.lang.Byte
#+END_SRC


177/5000
Os inteiros tem metade do tamanho de Longs; eles armazenam valores em 32 bits. Shorts tem 16 bits e Bytes tem 8. Isso significa que seus maiores valores são 231-1, 215-1 e 27-1, respectivamente.
